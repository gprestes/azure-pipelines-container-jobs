parameters:
  - name: dockerVersion
    displayName: 'Docker Version'
    type: string
    default: '20.10.17'

  - name: dotnetVersion
    displayName: '.NET Version'
    type: string
    default: '6.0.302'

  - name: powershellVersion
    displayName: 'PowerShell Version'
    type: string
    default: '7.2.5'

trigger:
- main

pool:
  vmImage: ubuntu-latest

jobs:

  - job: build_image
    displayName: Build Docker image

    # This job could run in a container too, but not absolutely necessary
    # container: mcr.microsoft.com/dotnet/sdk:6.0-focal # This has PowerShell

    variables:
      DOCKER_BUILDKIT: 1

    steps:
    - checkout: self
      fetchDepth: 0
    - task: PowerShell@2
      inputs:
        filePath: "scripts/Test-ChangesMadeInPath.ps1"
        arguments: >-
          -authorisation "Bearer $($env:SYSTEM_ACCESSTOKEN)" 
          -pathFilter "build/containers" 
          -buildId $(Build.BuildId)
          -collectionUri "$(System.CollectionUri)"
          -project "$(System.TeamProject)"
      env:
        SYSTEM_ACCESSTOKEN: $(system.accesstoken)

    - task: DockerInstaller@0
      displayName: Docker Installer
      condition: eq(variables['filesUpdated'], 'True')
      inputs:
        dockerVersion: ${{ parameters.dockerVersion }}
        releaseType: stable

    - script: |
        docker info
      displayName: 'Docker: info'
      condition: eq(variables['filesUpdated'], 'True')

    - task: Docker@2
      displayName: 'Docker: login'
      condition: eq(variables['filesUpdated'], 'True')
      inputs:
        command: login
        containerRegistry: 'GitHub Packages' # This is the name of the service connection to GitHub

    # If you're using a private Docker registry, docker build (with BuildKit) may have trouble
    # downloading via the --cache-from argument.
    # - script: |
    #     docker pull ghcr.io/flcdrg/azure-pipelines-container-jobs:latest
    #   displayName: 'Docker: pull'
    #   condition: eq(variables['filesUpdated'], 'True')

    - task: Docker@2
      displayName: 'Docker: build'
      condition: eq(variables['filesUpdated'], 'True')
      inputs:
        containerRegistry: 'GitHub Packages'
        repository: 'flcdrg/azure-pipelines-container-jobs'
        command: 'build'
        buildContext: 'build/containers'
        Dockerfile: 'build/containers/Dockerfile'
        arguments: '--build-arg BUILDKIT_INLINE_CACHE=1 --build-arg DOTNET_SDK_VERSION=${{ parameters.dotnetVersion }} --build-arg POWERSHELL_VERSION=${{ parameters.powershellVersion }} --cache-from ghcr.io/flcdrg/azure-pipelines-container-jobs:latest'
        tags: 'latest'

    - task: Docker@2
      displayName: 'Docker: push'
      condition: eq(variables['filesUpdated'], 'True')
      inputs:
        containerRegistry: 'GitHub Packages'
        repository: 'flcdrg/azure-pipelines-container-jobs'
        command: 'push'
        tags: 'latest'

  - job: use_image
    displayName: Use image
    dependsOn: build_image
    container:
      image: $(ContainerName)
      endpoint: 'GitHub Packages'

    variables:
      Configuration: Release
      ContainerName: 'ghcr.io/flcdrg/azure-pipelines-container-jobs:latest'

    steps:
      - task: DockerInstaller@0
        displayName: Docker Installer
        inputs:
          dockerVersion: ${{ parameters.dockerVersion }}
          releaseType: stable

      - script: |
          dotnet --info
          docker info
        displayName: Info

      - script: |
          printenv
          dotnet --info
          docker info
        displayName: Info for host
        target: host

      - task: DotNetCoreCLI@2
        displayName: '.NET: build'
        inputs:
          command: 'build'
          workingDirectory: src
        
